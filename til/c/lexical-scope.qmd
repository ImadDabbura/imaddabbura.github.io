---
title: "Lexical Scope in C"
date: 2023-10-04
categories: C
---
The lexical scope of an object or function identifier in an external declaration begins at the end of its 
declarator and persists to the end of the translation unit in which it appears. The scope of a parameter 
of a function definition begins at the start of theblock defining the function, and persists through the function; 
the scope of a parameter in a function declaration ends at the end of the declarator. The scope of an identifier 
declared at the head of a block begins at the end of its declarator, and persists to the end of the block. The scope 
of a label is the whole of the function in which it appears. The scope of a structure, union, or enumeration tag, 
or an enumeration constant, beginsat its appearance in a type specifier, and persists to the end of the translation unit 
(for declarations at the external level) or to the end of the block (for declarations within a function). If an identifier 
is explicitly declared at the head of a block, including the block constituting a function, any declaration of the identifier 
outside the block is suspended until the end of the block.
